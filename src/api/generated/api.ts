/* tslint:disable */
/* eslint-disable */
/**
 * ExperimentQSTNARE.WebApi
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface AnswerDto
 */
export interface AnswerDto {
    /**
     * 
     * @type {QuestionDto}
     * @memberof AnswerDto
     */
    'question'?: QuestionDto;
    /**
     * 
     * @type {string}
     * @memberof AnswerDto
     */
    'value'?: string | null;
}
/**
 * 
 * @export
 * @interface AnswerPostRequest
 */
export interface AnswerPostRequest {
    /**
     * 
     * @type {string}
     * @memberof AnswerPostRequest
     */
    'answerId'?: string;
    /**
     * 
     * @type {string}
     * @memberof AnswerPostRequest
     */
    'data'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AnswerPostRequest
     */
    'participantId'?: string;
}
/**
 * 
 * @export
 * @interface ExperimentDto
 */
export interface ExperimentDto {
    /**
     * 
     * @type {string}
     * @memberof ExperimentDto
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof ExperimentDto
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof ExperimentDto
     */
    'description': string;
}
/**
 * 
 * @export
 * @interface FacultyDto
 */
export interface FacultyDto {
    /**
     * 
     * @type {string}
     * @memberof FacultyDto
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof FacultyDto
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface MajorDto
 */
export interface MajorDto {
    /**
     * 
     * @type {string}
     * @memberof MajorDto
     */
    'code': string;
    /**
     * 
     * @type {string}
     * @memberof MajorDto
     */
    'name': string;
}
/**
 * 
 * @export
 * @interface ParticipantDto
 */
export interface ParticipantDto {
    /**
     * 
     * @type {string}
     * @memberof ParticipantDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof ParticipantDto
     */
    'surname': string;
    /**
     * 
     * @type {string}
     * @memberof ParticipantDto
     */
    'forname': string;
    /**
     * 
     * @type {number}
     * @memberof ParticipantDto
     */
    'age': number;
    /**
     * 
     * @type {string}
     * @memberof ParticipantDto
     */
    'profession'?: string | null;
    /**
     * 
     * @type {MajorDto}
     * @memberof ParticipantDto
     */
    'major'?: MajorDto;
}
/**
 * 
 * @export
 * @interface QuestionDto
 */
export interface QuestionDto {
    /**
     * 
     * @type {string}
     * @memberof QuestionDto
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof QuestionDto
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof QuestionDto
     */
    'type': string;
    /**
     * 
     * @type {string}
     * @memberof QuestionDto
     */
    'schema': string;
    /**
     * 
     * @type {string}
     * @memberof QuestionDto
     */
    'group': string;
    /**
     * 
     * @type {string}
     * @memberof QuestionDto
     */
    'formData'?: string | null;
}
/**
 * 
 * @export
 * @interface RegisterParticipantRequest
 */
export interface RegisterParticipantRequest {
    /**
     * 
     * @type {string}
     * @memberof RegisterParticipantRequest
     */
    'forName': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterParticipantRequest
     */
    'surName': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterParticipantRequest
     */
    'email': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterParticipantRequest
     */
    'profession'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RegisterParticipantRequest
     */
    'major'?: string | null;
    /**
     * 
     * @type {string}
     * @memberof RegisterParticipantRequest
     */
    'experiment': string;
    /**
     * 
     * @type {number}
     * @memberof RegisterParticipantRequest
     */
    'age': number;
    /**
     * 
     * @type {boolean}
     * @memberof RegisterParticipantRequest
     */
    'rightHanded'?: boolean;
}

/**
 * ExperimentQSTNAREWebApiApi - axios parameter creator
 * @export
 */
export const ExperimentQSTNAREWebApiApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {AnswerPostRequest} answerPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        answerPost: async (answerPostRequest: AnswerPostRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'answerPostRequest' is not null or undefined
            assertParamExists('answerPost', 'answerPostRequest', answerPostRequest)
            const localVarPath = `/answer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(answerPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        experimentGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/experiment`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        facultyGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/faculty`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} facultyCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        majorFacultyCodeGet: async (facultyCode: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'facultyCode' is not null or undefined
            assertParamExists('majorFacultyCodeGet', 'facultyCode', facultyCode)
            const localVarPath = `/major/{facultyCode}`
                .replace(`{${"facultyCode"}}`, encodeURIComponent(String(facultyCode)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [experimentCode] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        participantGet: async (experimentCode?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/participant`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (experimentCode !== undefined) {
                localVarQueryParameter['experimentCode'] = experimentCode;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {string} experimentCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        participantIdAnswerGet: async (id: string, experimentCode: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('participantIdAnswerGet', 'id', id)
            // verify required parameter 'experimentCode' is not null or undefined
            assertParamExists('participantIdAnswerGet', 'experimentCode', experimentCode)
            const localVarPath = `/participant/{id}/answer`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (experimentCode !== undefined) {
                localVarQueryParameter['experimentCode'] = experimentCode;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        participantIdGet: async (id: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('participantIdGet', 'id', id)
            const localVarPath = `/participant/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {RegisterParticipantRequest} registerParticipantRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        participantPost: async (registerParticipantRequest: RegisterParticipantRequest, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'registerParticipantRequest' is not null or undefined
            assertParamExists('participantPost', 'registerParticipantRequest', registerParticipantRequest)
            const localVarPath = `/participant`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(registerParticipantRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} experimentCode 
         * @param {string} participantId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        questionGet: async (experimentCode: string, participantId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'experimentCode' is not null or undefined
            assertParamExists('questionGet', 'experimentCode', experimentCode)
            // verify required parameter 'participantId' is not null or undefined
            assertParamExists('questionGet', 'participantId', participantId)
            const localVarPath = `/question`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (experimentCode !== undefined) {
                localVarQueryParameter['experimentCode'] = experimentCode;
            }

            if (participantId !== undefined) {
                localVarQueryParameter['participantId'] = participantId;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ExperimentQSTNAREWebApiApi - functional programming interface
 * @export
 */
export const ExperimentQSTNAREWebApiApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ExperimentQSTNAREWebApiApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {AnswerPostRequest} answerPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async answerPost(answerPostRequest: AnswerPostRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.answerPost(answerPostRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExperimentQSTNAREWebApiApi.answerPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async experimentGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ExperimentDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.experimentGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExperimentQSTNAREWebApiApi.experimentGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async facultyGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<FacultyDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.facultyGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExperimentQSTNAREWebApiApi.facultyGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} facultyCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async majorFacultyCodeGet(facultyCode: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<MajorDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.majorFacultyCodeGet(facultyCode, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExperimentQSTNAREWebApiApi.majorFacultyCodeGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} [experimentCode] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async participantGet(experimentCode?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ParticipantDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.participantGet(experimentCode, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExperimentQSTNAREWebApiApi.participantGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {string} experimentCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async participantIdAnswerGet(id: string, experimentCode: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<AnswerDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.participantIdAnswerGet(id, experimentCode, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExperimentQSTNAREWebApiApi.participantIdAnswerGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async participantIdGet(id: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ParticipantDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.participantIdGet(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExperimentQSTNAREWebApiApi.participantIdGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {RegisterParticipantRequest} registerParticipantRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async participantPost(registerParticipantRequest: RegisterParticipantRequest, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ParticipantDto>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.participantPost(registerParticipantRequest, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExperimentQSTNAREWebApiApi.participantPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} experimentCode 
         * @param {string} participantId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async questionGet(experimentCode: string, participantId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<QuestionDto>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.questionGet(experimentCode, participantId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ExperimentQSTNAREWebApiApi.questionGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ExperimentQSTNAREWebApiApi - factory interface
 * @export
 */
export const ExperimentQSTNAREWebApiApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ExperimentQSTNAREWebApiApiFp(configuration)
    return {
        /**
         * 
         * @param {AnswerPostRequest} answerPostRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        answerPost(answerPostRequest: AnswerPostRequest, options?: any): AxiosPromise<void> {
            return localVarFp.answerPost(answerPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        experimentGet(options?: any): AxiosPromise<Array<ExperimentDto>> {
            return localVarFp.experimentGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        facultyGet(options?: any): AxiosPromise<Array<FacultyDto>> {
            return localVarFp.facultyGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} facultyCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        majorFacultyCodeGet(facultyCode: string, options?: any): AxiosPromise<Array<MajorDto>> {
            return localVarFp.majorFacultyCodeGet(facultyCode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [experimentCode] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        participantGet(experimentCode?: string, options?: any): AxiosPromise<Array<ParticipantDto>> {
            return localVarFp.participantGet(experimentCode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {string} experimentCode 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        participantIdAnswerGet(id: string, experimentCode: string, options?: any): AxiosPromise<Array<AnswerDto>> {
            return localVarFp.participantIdAnswerGet(id, experimentCode, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        participantIdGet(id: string, options?: any): AxiosPromise<ParticipantDto> {
            return localVarFp.participantIdGet(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {RegisterParticipantRequest} registerParticipantRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        participantPost(registerParticipantRequest: RegisterParticipantRequest, options?: any): AxiosPromise<ParticipantDto> {
            return localVarFp.participantPost(registerParticipantRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} experimentCode 
         * @param {string} participantId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        questionGet(experimentCode: string, participantId: string, options?: any): AxiosPromise<Array<QuestionDto>> {
            return localVarFp.questionGet(experimentCode, participantId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ExperimentQSTNAREWebApiApi - object-oriented interface
 * @export
 * @class ExperimentQSTNAREWebApiApi
 * @extends {BaseAPI}
 */
export class ExperimentQSTNAREWebApiApi extends BaseAPI {
    /**
     * 
     * @param {AnswerPostRequest} answerPostRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExperimentQSTNAREWebApiApi
     */
    public answerPost(answerPostRequest: AnswerPostRequest, options?: RawAxiosRequestConfig) {
        return ExperimentQSTNAREWebApiApiFp(this.configuration).answerPost(answerPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExperimentQSTNAREWebApiApi
     */
    public experimentGet(options?: RawAxiosRequestConfig) {
        return ExperimentQSTNAREWebApiApiFp(this.configuration).experimentGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExperimentQSTNAREWebApiApi
     */
    public facultyGet(options?: RawAxiosRequestConfig) {
        return ExperimentQSTNAREWebApiApiFp(this.configuration).facultyGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} facultyCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExperimentQSTNAREWebApiApi
     */
    public majorFacultyCodeGet(facultyCode: string, options?: RawAxiosRequestConfig) {
        return ExperimentQSTNAREWebApiApiFp(this.configuration).majorFacultyCodeGet(facultyCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} [experimentCode] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExperimentQSTNAREWebApiApi
     */
    public participantGet(experimentCode?: string, options?: RawAxiosRequestConfig) {
        return ExperimentQSTNAREWebApiApiFp(this.configuration).participantGet(experimentCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {string} experimentCode 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExperimentQSTNAREWebApiApi
     */
    public participantIdAnswerGet(id: string, experimentCode: string, options?: RawAxiosRequestConfig) {
        return ExperimentQSTNAREWebApiApiFp(this.configuration).participantIdAnswerGet(id, experimentCode, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExperimentQSTNAREWebApiApi
     */
    public participantIdGet(id: string, options?: RawAxiosRequestConfig) {
        return ExperimentQSTNAREWebApiApiFp(this.configuration).participantIdGet(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {RegisterParticipantRequest} registerParticipantRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExperimentQSTNAREWebApiApi
     */
    public participantPost(registerParticipantRequest: RegisterParticipantRequest, options?: RawAxiosRequestConfig) {
        return ExperimentQSTNAREWebApiApiFp(this.configuration).participantPost(registerParticipantRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} experimentCode 
     * @param {string} participantId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ExperimentQSTNAREWebApiApi
     */
    public questionGet(experimentCode: string, participantId: string, options?: RawAxiosRequestConfig) {
        return ExperimentQSTNAREWebApiApiFp(this.configuration).questionGet(experimentCode, participantId, options).then((request) => request(this.axios, this.basePath));
    }
}



